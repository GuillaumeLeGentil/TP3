define([
	//charger les librairies
    'vendor/three.js/Three',
    'vendor/three.js/Detector',
    'vendor/three.js/Stats', 
    'vendor/threex/THREEx.screenshot',
    'vendor/threex/THREEx.FullScreen',
    'vendor/threex/THREEx.WindowResize',
    'vendor/threex.dragpancontrols'
  
], function(t , d, s) {
  	var stats, scene, renderer, composer;
    	var camera, cameraControls;
   	var cube;

	console.log("+1");

        // Initialization stuffunction init(){
	function initialize(){
	if( Detector.webgl ){
		renderer = new THREE.WebGLRenderer({
			antialias		: true,	// to get smoother output
			preserveDrawingBuffer	: true	// to allow screenshot
		});
		renderer.setClearColor( 0xbbbbbb );
	}else{
		Detector.addGetWebGLMessage();
		return true;
	}
	renderer.setSize( window.innerWidth, window.innerHeight );
	document.getElementById('container').appendChild(renderer.domElement);

	// add Stats.js - https://github.com/mrdoob/stats.js
	stats = new Stats();
	stats.domElement.style.position	= 'absolute';
	stats.domElement.style.bottom	= '0px';
	document.body.appendChild( stats.domElement );

	// create a scene
	scene = new THREE.Scene();

	// put a camera in the scene
	camera	= new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 10000 );
	camera.position.set(0, 0, 5);
	scene.add(camera);

	// création d'une caméra de controle
	 cameraControls= new THREEx.DragPanControls(camera);

	// transparently support window resize
	THREEx.WindowResize.bind(renderer, camera);
	// allow 'p' to make screenshot
	THREEx.Screenshot.bindKey(renderer);
	// allow 'f' to go fullscreen where this feature is supported
	if( THREEx.FullScreen.available() ){
	THREEx.FullScreen.bindKey();		
	document.getElementById('inlineDoc').innerHTML	+= "- <i>f</i> for fullscreen";
	}


	// here you add your objects
	//Création du cube 
	var geometry = new THREE.BoxGeometry( 1, 1, 1 );
	var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
	cube = new THREE.Mesh( geometry, material );
	scene.add( cube );

	}

	// animation loop
	function animate() {

	// loop on request animation loop
	requestAnimationFrame( animate );
	// do the render
	render();

	// update stats
	stats.update();
	}

	// render the scene
	function render() {


	// update camera controls
	//cameraControls.update();

	// actually render the scene
	renderer.render( scene, camera );
	}
 
    // On exporte la fonction initialize dans le module app.js
    return {
    	initialize : initialize,
        animate : animate,
        render : render
        
    };
 
});



